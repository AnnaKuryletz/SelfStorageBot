from aiogram import F, Router
from aiogram.types import CallbackQuery, FSInputFile
import requests
import segno
import os

import app.keyboards as kb
from config import API_URL

my_orders_router = Router()


@my_orders_router.callback_query(F.data == "my_orders")
async def my_orders_handler(callback_query: CallbackQuery):
    telegram_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_response = requests.get(f"{API_URL}/users/", params={"telegram_id": telegram_id})

    if user_response.status_code == 200:
        users = user_response.json()

        user = next((u for u in users if u["telegram_id"] == telegram_id), None)

        if user:
            user_id = user["id"]

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
            orders_response = requests.get(f"{API_URL}/contracts/", params={"owner_name": user_id})

            if orders_response.status_code == 200 and orders_response.json():
                orders = orders_response.json()

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                orders_text = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
                for order in orders:
                    orders_text += (
                        f"üì¶ –ó–∞–∫–∞–∑ ID: {order['id']}\n"
                        f"üìç –ê–¥—Ä–µ—Å: {order['place_address']}\n"
                        f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è: {order['expiration_date']}\n"
                        f"üß≥ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {order['content']}\n\n"
                    )

                await callback_query.message.answer(
                    orders_text,
                    reply_markup=kb.generate_orders_keyboard(orders)
                )
                await callback_query.answer()
            else:
                await callback_query.message.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                await callback_query.answer()
        else:
            await callback_query.message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
            )
            await callback_query.answer()
    else:
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()


@my_orders_router.callback_query(F.data.startswith("order_"))
async def order_qr_handler(callback_query: CallbackQuery):
    order_id = callback_query.data.split("_")[1]

    # –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞
    qr_code = segno.make_qr(order_id)
    file_path = f"qrcodes/qr_{order_id}.png"
    os.makedirs("qrcodes", exist_ok=True)
    qr_code.save(file_path)

    qr_code_file = FSInputFile(file_path)
    await callback_query.message.answer_document(
        document=qr_code_file,
        caption=f"–í–∞—à QR-–∫–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}"
    )
    await callback_query.answer()

    os.remove(file_path)
