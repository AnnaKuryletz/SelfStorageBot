from aiogram import F, Router
from aiogram.types import CallbackQuery
import requests

import app.keyboards as kb
from config import API_URL

order_box_router = Router()


@order_box_router.callback_query(F.data == "order_box")
async def order_box_handler(callback_query: CallbackQuery):

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.order_box_keyboard
    )
    await callback_query.answer()


@order_box_router.callback_query(F.data == "warehouse_addresses")
async def warehouse_addresses_handler(callback_query: CallbackQuery):
    response = requests.get(f'{API_URL}/pickup-locations')
    if response.status_code == 200 and response.json():
        places = response.json()
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞:",
            reply_markup=await kb.warehouse_addresses_keyboard(places)
        )
        await callback_query.answer()
    else:
        await callback_query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥—Ä–µ—Å–æ–≤ —Å–∫–ª–∞–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return


@order_box_router.callback_query(F.data.startswith("location:"))
async def handle_location_callback(callback_query: CallbackQuery):
    _, latitude, longitude = callback_query.data.split(":")

    await callback_query.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∫–ª–∞–¥ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:\n"
        f"üåç –®–∏—Ä–æ—Ç–∞: {latitude}, –î–æ–ª–≥–æ—Ç–∞: {longitude}\n"
        "–°–ø–∞—Å–∏–±–æ. –ñ–¥–µ–º –í–∞—Å –ø–æ –¥–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É."
    )
    await callback_query.message.answer_location(
        latitude=float(latitude),
        longitude=float(longitude)
    )
    await callback_query.answer()


@order_box_router.callback_query(F.data == "order_courier")
async def order_courier_handler(callback_query: CallbackQuery):
    telegram_id = callback_query.from_user.id 

    user_response = requests.get(f"{API_URL}/users/?telegram_id={telegram_id}")

    if user_response.status_code == 200:
        user_data = user_response.json()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        user = next((u for u in user_data if u["telegram_id"] == telegram_id), None)

        if user is None:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id={telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
            return

        user_id = user["id"]
        print(f"User ID: {user_id}")

        response = requests.post(
            f"{API_URL}/calls/",
            json={
                "user": user_id,
                "call_type": "courier",
            }
        )

        if response.status_code == 201:
            await callback_query.message.answer("–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞.")
        else:
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö: {user_response.status_code}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.–ü–æ–ø—Ä–æ–±—É–π—Ç–µ")