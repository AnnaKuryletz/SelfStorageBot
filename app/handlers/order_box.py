from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import requests

import app.keyboards as kb
from config import API_URL

order_box_router = Router()


class OrderCourierStates(StatesGroup):
    waiting_for_phone_number = State()
    waiting_for_address = State()
    waiting_for_storage_duration = State()


@order_box_router.callback_query(F.data == "order_box")
async def order_box_handler(callback_query: CallbackQuery):

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.order_box_keyboard
    )
    await callback_query.answer()


@order_box_router.callback_query(F.data == "warehouse_addresses")
async def warehouse_addresses_handler(callback_query: CallbackQuery):
    response = requests.get(f'{API_URL}/pickup-locations')
    if response.status_code == 200 and response.json():
        places = response.json()
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞:",
            reply_markup=await kb.warehouse_addresses_keyboard(places)
        )
        await callback_query.answer()
    else:
        await callback_query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥—Ä–µ—Å–æ–≤ —Å–∫–ª–∞–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        return


@order_box_router.callback_query(F.data.startswith("location:"))
async def handle_location_callback(callback_query: CallbackQuery):
    _, latitude, longitude = callback_query.data.split(":")

    await callback_query.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∫–ª–∞–¥ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:\n"
        f"üåç –®–∏—Ä–æ—Ç–∞: {latitude}, –î–æ–ª–≥–æ—Ç–∞: {longitude}\n"
        "–°–ø–∞—Å–∏–±–æ. –ñ–¥–µ–º –í–∞—Å –ø–æ –¥–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É."
    )
    await callback_query.message.answer_location(
        latitude=float(latitude),
        longitude=float(longitude)
    )
    await callback_query.answer()


@order_box_router.callback_query(F.data == "order_courier")
async def order_courier_handler(callback_query: CallbackQuery, state: FSMContext):
    telegram_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ API
    user_response = requests.get(f"{API_URL}/users/?telegram_id={telegram_id}")

    if user_response.status_code == 200:
        user_data = user_response.json()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        user = next((u for u in user_data if u["telegram_id"] == telegram_id), None)

        if user is None:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id={telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
            return

        user_id = user["id"]
        print(f"User ID: {user_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(user_id=user_id)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await callback_query.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –∏ —É—Ç–æ—á–Ω–∏—Ç –¥–µ—Ç–∞–ª–∏. "
            "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ —Ç–æ–º, —á—Ç–æ –∑–∞–º–µ—Ä—ã –∫—É—Ä—å–µ—Ä –ø—Ä–æ–≤–æ–¥–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
        )
        await callback_query.answer()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(OrderCourierStates.waiting_for_phone_number)
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö: {user_response.status_code}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@order_box_router.message(OrderCourierStates.waiting_for_phone_number)
async def handle_phone_number(message: Message, state: FSMContext):
    phone_number = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone_number.isdigit() or len(phone_number) < 10:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥—Ä–µ—Å
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞.")
    await state.set_state(OrderCourierStates.waiting_for_address)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(phone_number=phone_number)


@order_box_router.message(OrderCourierStates.waiting_for_address)
async def handle_address(message: Message, state: FSMContext):
    address = message.text.strip()

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–Ω—è—Ö.")
    await state.update_data(address=address)
    await state.set_state(OrderCourierStates.waiting_for_storage_duration)


@order_box_router.message(OrderCourierStates.waiting_for_storage_duration)
async def handle_storage_duration(message: Message, state: FSMContext):
    try:
        storage_duration = int(message.text.strip())

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        phone_number = state_data.get("phone_number")
        address = state_data.get("address")

        # –°–∫–ª–µ–∏–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—è pre_order
        pre_order_data = f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}, –ê–¥—Ä–µ—Å: {address}, –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {storage_duration} –¥–Ω–µ–π"

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_id = state_data.get("user_id")

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        response = requests.patch(
            f"{API_URL}/users/{user_id}/",
            json={"phone_number": phone_number}
        )

        if response.status_code == 200:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º pre_order
            courier_response = requests.post(
                f"{API_URL}/calls/",
                json={
                    "user": user_id,
                    "call_type": "courier",
                    "pre_order": pre_order_data  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∫–ª–µ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                }
            )

            if courier_response.status_code == 201:
                await message.answer("–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞.")
            else:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–Ω—è—Ö.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
